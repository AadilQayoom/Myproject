import ContentContainer from "../components/ui/content-container/content-container";
import Head from "next/head";
import MainWrapper from "../components/ui/wrapper/wrapper";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useRouter } from "next/router";
import { useTranslation } from "next-i18next";
import { Slide } from 'react-slideshow-image';
import 'react-slideshow-image/dist/styles.css'
import { useEffect, useState } from "react";
import EventItem from "../components/home/event-item";
import classes from "./index.module.less"
import { GetEvents, getProfile } from "../services/apis/apisHome";
import EventsGallery from "../components/Events-gallery";
import EventDescription from "../components/Event_description";
import CommonService from "../services/commonService";
import { useRecoilState, useRecoilValue } from "recoil";
import { selectedEventState } from "../recoil/atoms/home";
import Tabs from "../components/ui/tabs/tabs";
import { loginDataState } from "../recoil/atoms/common";
import DateService from "../services/dateService";




const initSlides = [
  "/images/slides/iust.jpg",
  "/images/slides/iust2.jpg",
  "/images/slides/iust3.jpg",
];

const spanStyle = {
  padding: '20px',
  background: '#efefef',
  color: '#000000'
}

const divStyle = {
  display: 'flex',
  alignItems: 'center',
  justifyContent: 'center',
  backgroundSize: 'cover',
  height: '400px'
}



function Home() {
  const router = useRouter();
  const { t } = useTranslation("common");
  const currentDate = new Date().toLocaleDateString();

  //recoil states
  const [selectedEvent, setSelectedEvent] = useRecoilState(selectedEventState);
  const [loginData, setLoginData] = useRecoilState(loginDataState)


  //state variables
  const [showModal, setShowModal] = useState(false);
  const [events, setEvents] = useState([])
  const [fullEvents, setFullEvents] = useState([]);
  const [mediapath, setMediaPath] = useState("");
  const [currentMenu, setCurrentMenu] = useState("Upcoming events")

  //api calls
  const GetEventsFunc = GetEvents();
  const getProfileData = getProfile();


  useEffect(() => {

    if (loginData?.id) {
      let data = {
        "user_id": loginData.id
      }
      getProfileData({
        callback: res => {

          if (res?.data?.id) {
            setLoginData(res.data)
          }

        }, data: data
      })
    }
  }, [])


  //get all events
  useEffect(() => {
    GetEventsFunc({
      callback: res => {

        console.log("Response from evenets api", res)
        if (res?.data?.length) {
          setFullEvents(res?.data)
          setEvents(res?.data)

          setMediaPath(res.mediaPath)
        }
      }
    })
  }, []);


  useEffect(() => {

    let localEvents = CommonService.copyObject(fullEvents);

    let fi = [];
    if (currentMenu === "Upcoming events") {
      localEvents.forEach(item => {
        let myDate = DateService.changeDateFormat(item.event_date, "yyyy-mm-dd", "dd/mm/yyyy")

        if (myDate > currentDate) {
          fi.push(item)
        }
      });

    }

    setEvents(fi)

  }, [fullEvents])


  const getEvents = (menu) => {

    setCurrentMenu(menu);

    let localEvents = CommonService.copyObject(fullEvents);

    let fi = [];
    if (menu === "Upcoming events") {
      localEvents.forEach(item => {
        let myDate = DateService.changeDateFormat(item.event_date, "yyyy-mm-dd", "dd/mm/yyyy")

        if (myDate > currentDate) {
          fi.push(item)
        }
      });

    } else if (menu === "Ongoing events") {
      localEvents.forEach(item => {
        let myDate = DateService.changeDateFormat(item.event_date, "yyyy-mm-dd", "dd/mm/yyyy")

        if (myDate == currentDate) {
          fi.push(item)
        }
      });

    } else {
      localEvents.map(item => {
        let myDate = DateService.changeDateFormat(item.event_date, "yyyy-mm-dd", "dd/mm/yyyy")

        if (myDate < currentDate) {
          fi.push(item)
        }
      });

    }
    setEvents(fi)
  }

  const onEventClick = event => {
    setSelectedEvent(event)

    setTimeout(() => {
      router.push(`/event/${event.id}`)
    }, 300)
  }



  
const handleClick = () => {
  router.push('/viewallEvents')
}



  return (
    <MainWrapper t={t}>
      <div className={classes.container}>
        <Head>
          <title>cumputer-club</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <link
            rel="stylesheet"
            href="https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
            integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
            crossOrigin="anonymous"
          />
        </Head>

        <Slide>
          {initSlides.map((slideImage, index) => (
            <div key={index}>
              <div style={{ ...divStyle, 'backgroundImage': `url(${slideImage})` }}>
                <span style={spanStyle}>{slideImage.caption}</span>
              </div>
            </div>
          ))}
        </Slide>

        <ContentContainer>
          <div className={classes.events_heading}>News & Events</div>

          <div>
            <div className={classes.gallery_section}>
              <div className={classes.gallery_heading}>PHOTO GALLERY</div>
              <div className={classes.events_gallery}>
                <EventsGallery />
              </div>
              <div className={classes.viewall_button} ><span>View All</span></div>
            </div>
            <div>
              <div className={classes.events_created}>EVENTS,WORKSHOPS AND SEMINARS</div>

              <div className={classes.type_events}>

                <Tabs data={["Upcoming events", "Ongoing events", "Held events"]} setTab={(index) => getEvents(index)} />


              </div>
              <div className={classes.events_container}>

                {events?.slice(0, 6).map((event, index) => {
                  return <EventItem event={event} index={index} onEventClick={(event) => onEventClick(event)} mediaPath={mediapath} />
                })}

              </div>
              <div className={classes.viewall_events_button} onClick={handleClick} ><span>View All Events</span></div>

            </div>
          </div>

        </ContentContainer>
      </div>
      {showModal && <EventDescription
        item={selectedEvent}
        setShowModal={() => setShowModal(false)}
      />}

    </MainWrapper>
  );
}

export const getStaticProps = async ({ locale }) => ({
  props: {
    ...(await serverSideTranslations(locale ?? "es", ["common"])),
  },
});

export default Home;
